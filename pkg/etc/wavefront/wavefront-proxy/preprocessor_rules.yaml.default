##
##  Wavefront proxy preprocessor rules configuration
##
##   Typically in /etc/wavefront/wavefront-proxy/preprocessor_rules.yaml
##
## This file allows a more flexible configuration of different point filtering and altering rules.
##
## For help with your configuration, please email support@wavefront.com
##
##############################################################################
##
## available action types:
##   - replaceRegex: perform search/replace substitutions (substring match)
##   - allow: reject all points not matching a regex pattern (full match)
##   - block: reject all points matching a regex pattern (full match)
##   - forceLowercase: convert a point's component (metric name, source, point tag value) to lowercase
##   - dropTag: remove a point tag. optional: remove tag only when its value matches a regex pattern (full match))
##   - addTag: add a new point tag. if such point tag already exists, an existing value will be replaced
##   - addTagIfNotExists: add a new point tag, but don't overwrite existing value if such point tag already exists
##   - extractTag: create a new point tag based on a metric name, source name or another point tag
##   - extractTagIfNotExists: same as above, but don't overwrite existing value if such point tag already exists
##   - renameTag: rename a point tag, preserving its value. optional: rename it only when the point tag value matches
##                a regex pattern (full match). this functionality allows separating a point tag with mixed data into
##                separate tags.
##   - limitLength: enforce custom string length limits for various data point's components (metric name, source,
##                  point tag value). Available action sub-types: truncate, truncateWithEllipsis, drop
##   - count: count the number of points matching an optional "if" condition. When no "if" condition
##            is specified, the rule is effectively a no-op.
##
## "Scope" parameter for replaceRegex/allow/block:
##   - pointLine: applies to the whole point string before it's parsed, which makes it possible to correct
##                specific issues in the data stream that would normally make the data point unparseable.
##
##   - metricName: applies to the metric name only (after the point is parsed)
##   - sourceName: applies to the source name only (after the point is parsed)
##   - <point tag>: any scope name other than the above three is considered a point tag key (after the point is parsed)
##
##
## Notes:
##   - backslashes in regex patterns should be double-escaped
##   - numeric values should be wrapped in quotes
##   - "match" patterns must be a full match, i.e. a regex to block the point line that contains "stage" substring
##     will look like ".*stage.*". replaceRegex "search" patterns are a substring match, so if the pattern is "A"
##     and replace is "B", it will simply replace all A's with B's.
##   - rule IDs could be anything alphanumeric (dashes and underscores allowed), but they should be descriptive and
##     unique within the same port. for every rule the proxy reports a counter metric, which represents the number of
##     times a rule has been successfully applied, and a rule ID becomes part of the metric name
##     (ex: ~agent.preprocessor.replace-badchars.count)
##   - multiple allow rules are allowed, with a caveat: a point must satisfy all of these rules
##     to go through, so if it doesn't match at least one of the patterns, a point is blocked
##
##############################################################################

## rules that apply only to data received on port 2879
#'2879':

  # Example no-op rule
  #################################################################
  # - rule    : example-rule-do-nothing
  #   action  : count

## rules that apply only to data received on port 2878
#'2878':

  ## Example rule that count points where metric value is 0 and metric name starts with 'a'
  ##################################################################
  #- rule    : example-count-points-zero-value
  #  action  : count
  #  if      : "({{metricName}} startsWith 'a') and ($value = 0)"

  ## replace bad characters ("&", "$", "*") with underscores in the entire point line string
  #################################################################
  #- rule    : example-replace-badchars
  #  action  : replaceRegex
  #  scope   : pointLine
  #  search  : "[&\\$\\*]"
  #  replace : "_"

  ## extract Graphite 1.1+ tags from the metric name, i.e. convert
  ## "metric.name;source=src;foo=bar;boo=baz 1.0 1507933795" to
  ## "metric.name 1.0 1507933795 source=src foo=bar boo=baz"
  #################################################################
  #- rule       : convert-tagged-graphite-format
  #  action     : replaceRegex
  #  scope      : pointLine
  #  search     : "([^;]*);([^; ]*)([ ;].*)"
  #  replace    : "$1$3 $2"
  #  iterations : '10'

  ## extract DataDog-formatted tags from the metric name, i.e. convert
  ## "metric.name[source:src,foo:bar,boo:baz] 1.0 1507933795" to
  ## "metric.name 1.0 1507933795 source=src foo=bar boo=baz"
  ## note: both rules must be enabled; second rule extracts the last
  ## tag value and removes surrounding square braces
  #################################################################
  #- rule       : extract-datadog-tags-1
  #  action     : replaceRegex
  #  scope      : pointLine
  #  search     : '^([^\[]*\[)([^:]*):([^,]*),([^\]]*].*)$'
  #  replace    : '$1$4 \"$2\"=\"$3\"'
  #  iterations : '10'

  #- rule       : extract-datadog-tags-2
  #  action     : replaceRegex
  #  scope      : pointLine
  #  search     : '^([^\[]*)\[([^:]*):([^,^\]]*)](.*)$'
  #  replace    : '$1$4 \"$2\"=\"$3\"'

  ## only allow points that contain "prod" substring anywhere in the point line
  ################################################################
  #- rule    : example-allow-only-prod
  #  action  : allow
  #  scope   : pointLine
  #  match   : ".*prod.*"

  ## block all points with sourceName that starts with qa-statsd
  ################################################################
  #- rule    : example-block-qa-statsd
  #  action  : block
  #  scope   : sourceName
  #  match   : "qa-statsd.*"

  ## block all AWS metrics (all metric names that start with "aws.")
  ################################################################
  #- rule    : example-block-aws
  #  action  : block
  #  scope   : metricName
  #  match   : "aws\\..*"

  ## block all points where "datacenter" point tag starts with "west"
  ################################################################
  #- rule    : example-block-west
  #  action  : block
  #  scope   : datacenter
  #  match   : "west.*"

  ## remove "metrictest." from the metric name
  ################################################################
  #- rule    : example-replace-metric-name
  #  action  : replaceRegex
  #  scope   : metricName
  #  search  : "metrictest\\."
  #  replace : ""

  ## for "exampleCluster" point tag replace all "-" characters with dots
  ################################################################
  #- rule    : example-cluster-name
  #  action  : replaceRegex
  #  scope   : exampleCluster
  #  search  : "-"
  #  replace : "."
  
  # remove the string in the second position of a metric name
  ################################################################
  #- rule    : example-remove-second-position
  #  action  : replaceRegex
  #  scope   : metricName
  #  search  : "([^\\.]+)(\\..+?)(\\..*)"
  #  replace : "$1$3"

  # force lowercase on metric name (with optional regex match)
  ################################################################
  #- rule    : example-force-lowercase
  #  action  : forceLowercase
  #  scope   : metricName
  #  match   : "^UPPERCASE.*$"

  ## rename a point tag
  ################################################################
  #- rule    : example-renametag
  #  action  : renameTag
  #  tag     : veryOldTag
  #  newtag  : renamedTag

  ## rename a point tag if its value matches a regex
  ## in this example the "^\d*$" regex matches numeric values only, so oldTag=123 would be renamed to numericTag=123,
  ## but oldTag=text123 would not be changed.
  ################################################################
  #- rule    : example-renametag-regex
  #  action  : renameTag
  #  tag     : oldTag
  #  match   : "^\\d*$"
  #  newtag  : numericTag

  ## add a "newtagkey=1" point tag to all points
  ################################################################
  #- rule    : example-tag-all-metrics
  #  action  : addTag
  #  tag     : newtagkey
  #  value   : "1"

  ## remove "dc1" point tag
  ################################################################
  #- rule    : example-drop-dc1
  #  action  : dropTag
  #  tag     : dc1

  ## remove "datacenter" point tag if its value matches a regex
  ################################################################
  #- rule    : example-drop-datacenter-az456
  #  action  : dropTag
  #  tag     : datacenter
  #  match   : "az[4-6]"  # remove az4, az5, az6 (leave az1, az2, az3)

  ## block all points that have a point tag "blocker" (any value)
  ################################################################
  #- rule    : example-block-by-tag
  #  action  : block
  #  scope   : blocker
  #  match   : ".*"

  ## extract 3rd dot-delimited node from the metric name into newTag
  ## point tag, and remove it from the metric, i.e. from
  ## "delimited.metric.tagValue.foo" metric extract "newTag=tagValue"
  ## tag and change metric name to "delimited.metric.foo"
  ################################################################
  #- rule          : example-extract-tag-from-delimited-metric
  #  action        : extractTag
  #  tag           : newTag
  #  source        : metricName
  #  match         : "delimited.*"
  #  search        : "^([^\\.]*\\.[^\\.]*\\.)([^\\.]*)\\.(.*)$"
  #  replace       : "$2"
  #  replaceInput  : "$1$3" # optional, omit if you plan on just extracting the tag leaving the metric name intact

  ## Advanced predicates for finer control.
  ## Example: The below rule uses nested predicates to allow all "prod" metrics i.e.
  ## all -> returns true in case both "any" AND "none" is true.
  ## any -> returns true in case either nested "all" OR "startsWith" OR "equals" is true.
  ## none -> returns true in case nested comparison is false.
  ###################################################################################
  #- rule: test-allow
  #  action: allow
  #  if:
  #    all:
  #      - any:
  #        - all:
  #          - contains:
  #              scope: sourceName
  #              value: "prod"
  #          - startsWith
  #              scope: metricName
  #              value: "foometric."
  #        - startsWith:
  #            scope: metricName
  #            value: "foometric.prod."
  #        - equals:
  #            scope: env
  #            value: "prod"
  #      - none:
  #        - equals:
  #            scope: debug
  #            value: ["true"]

  ## Advanced condition expression: block QA metrics (with source name containing 'qa'
  # or env=qa point tag), that are older than 10 minutes
  ###################################################################################
  #- rule: test-block-old-qa-metrics
  #  action: block
  #  if: '({{sourceName}} contains "qa" or {{env}} = "qa") and not {{debug}} = "true" and $timestamp < time("10 minutes ago")'

  ## Advanced condition expression: do deterministic sampling at 25% based on containerId
  # (only allow metrics for 1 out of 4 containers) for staging k8s metrics.
  ###################################################################################
  #- rule: test-sample-staging-k8s-metrics
  #  action: block
  #  if: '{{sourceName}} contains "staging" and {{metricName}} startsWith "k8s." and {{containerId}}.hashCode() % 4 != 0'

## rules for port 4242
#'4242':

  ## replace bad characters ("&", "$", "!") with underscores in the metric name
  ################################################################
  #- rule    : example-replace-badchars
  #  action  : replaceRegex
  #  scope   : metricName
  #  search  : "[&\\$!]"
  #  replace : "_"

  ## remove "tsdb." from the metric name
  ################################################################
  #- rule    : example-replace-tsdb
  #  action  : replaceRegex
  #  scope   : metricName
  #  search  : "tsdb\\."
  #  replace : ""

## rules for port 30001
#'30001':

  ## truncate 'db.statement' annotation value at 128 characters,
  ## replace last 3 characters with '...'.
  ################################################################
  #- rule          : example-limit-db-statement
  #  action        : spanLimitLength
  #  scope         : "db.statement"
  #  actionSubtype : truncateWithEllipsis
  #  maxLength     : "128"

## Multiport preprocessor rules
## The following rules will apply to ports 2878, 2980 and 4343
#'2878, 2980, 4343':

  ## Add k8s cluster name point tag for all points across multiple ports.
  #- rule    : example-rule-delete-merenametag-k8s-cluster
  #  action  : addTag
  #  tag     : k8scluster
  #  value   : eks-dev

# rules that apply to all ports explicitly specified above. Global rules must be at the end of the file
# 'global':

  # Example no-op rule
  #################################################################
  # - rule    : example-rule-do-nothing
  #   action  : count
